package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for fourierMode kernel
var fourierMode_code cu.Function

// Stores the arguments for fourierMode kernel invocation
type fourierMode_args_t struct {
	arg_dstReal unsafe.Pointer
	arg_dstImag unsafe.Pointer
	arg_fx      float32
	arg_fy      float32
	arg_fz      float32
	arg_Nx      int
	arg_Ny      int
	arg_Nz      int
	argptr      [8]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for fourierMode kernel invocation
var fourierMode_args fourierMode_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	fourierMode_args.argptr[0] = unsafe.Pointer(&fourierMode_args.arg_dstReal)
	fourierMode_args.argptr[1] = unsafe.Pointer(&fourierMode_args.arg_dstImag)
	fourierMode_args.argptr[2] = unsafe.Pointer(&fourierMode_args.arg_fx)
	fourierMode_args.argptr[3] = unsafe.Pointer(&fourierMode_args.arg_fy)
	fourierMode_args.argptr[4] = unsafe.Pointer(&fourierMode_args.arg_fz)
	fourierMode_args.argptr[5] = unsafe.Pointer(&fourierMode_args.arg_Nx)
	fourierMode_args.argptr[6] = unsafe.Pointer(&fourierMode_args.arg_Ny)
	fourierMode_args.argptr[7] = unsafe.Pointer(&fourierMode_args.arg_Nz)
}

// Wrapper for fourierMode CUDA kernel, asynchronous.
func k_fourierMode_async(dstReal unsafe.Pointer, dstImag unsafe.Pointer, fx float32, fy float32, fz float32, Nx int, Ny int, Nz int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("fourierMode")
	}

	fourierMode_args.Lock()
	defer fourierMode_args.Unlock()

	if fourierMode_code == 0 {
		fourierMode_code = fatbinLoad(fourierMode_map, "fourierMode")
	}

	fourierMode_args.arg_dstReal = dstReal
	fourierMode_args.arg_dstImag = dstImag
	fourierMode_args.arg_fx = fx
	fourierMode_args.arg_fy = fy
	fourierMode_args.arg_fz = fz
	fourierMode_args.arg_Nx = Nx
	fourierMode_args.arg_Ny = Ny
	fourierMode_args.arg_Nz = Nz

	args := fourierMode_args.argptr[:]
	cu.LaunchKernel(fourierMode_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("fourierMode")
	}
}

// maps compute capability on PTX code for fourierMode kernel.
var fourierMode_map = map[int]string{0: "",
	80: fourierMode_ptx_80}

// fourierMode PTX code for various compute capabilities.
const (
	fourierMode_ptx_80 = `
.version 8.2
.target sm_80
.address_size 64

	// .globl	fourierMode
.global .align 4 .b8 __cudart_i2opi_f[24] = {65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};

.visible .entry fourierMode(
	.param .u64 fourierMode_param_0,
	.param .u64 fourierMode_param_1,
	.param .f32 fourierMode_param_2,
	.param .f32 fourierMode_param_3,
	.param .f32 fourierMode_param_4,
	.param .u32 fourierMode_param_5,
	.param .u32 fourierMode_param_6,
	.param .u32 fourierMode_param_7
)
{
	.local .align 4 .b8 	__local_depot0[28];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<26>;
	.reg .f32 	%f<72>;
	.reg .b32 	%r<124>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<51>;


	mov.u64 	%SPL, __local_depot0;
	ld.param.u64 	%rd16, [fourierMode_param_0];
	ld.param.u64 	%rd17, [fourierMode_param_1];
	ld.param.f32 	%f24, [fourierMode_param_2];
	ld.param.f32 	%f25, [fourierMode_param_3];
	ld.param.f32 	%f26, [fourierMode_param_4];
	ld.param.u32 	%r40, [fourierMode_param_5];
	ld.param.u32 	%r41, [fourierMode_param_6];
	ld.param.u32 	%r42, [fourierMode_param_7];
	add.u64 	%rd1, %SPL, 0;
	mov.u32 	%r43, %ntid.x;
	mov.u32 	%r44, %ctaid.x;
	mov.u32 	%r45, %tid.x;
	mad.lo.s32 	%r1, %r44, %r43, %r45;
	mov.u32 	%r46, %ntid.y;
	mov.u32 	%r47, %ctaid.y;
	mov.u32 	%r48, %tid.y;
	mad.lo.s32 	%r2, %r47, %r46, %r48;
	mov.u32 	%r49, %ntid.z;
	mov.u32 	%r50, %ctaid.z;
	mov.u32 	%r51, %tid.z;
	mad.lo.s32 	%r3, %r50, %r49, %r51;
	setp.ge.s32 	%p1, %r1, %r40;
	setp.ge.s32 	%p2, %r2, %r41;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r42;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_26;

	mad.lo.s32 	%r52, %r3, %r41, %r2;
	mad.lo.s32 	%r4, %r52, %r40, %r1;
	cvt.rn.f32.s32 	%f27, %r1;
	cvt.rn.f32.s32 	%f28, %r3;
	mul.f32 	%f29, %f28, %f25;
	fma.rn.f32 	%f30, %f27, %f24, %f29;
	fma.rn.f32 	%f1, %f28, %f26, %f30;
	mul.f32 	%f31, %f1, 0f3F22F983;
	cvt.rni.s32.f32 	%r123, %f31;
	cvt.rn.f32.s32 	%f32, %r123;
	mov.f32 	%f33, 0fBFC90FDA;
	fma.rn.f32 	%f34, %f32, %f33, %f1;
	mov.f32 	%f35, 0fB3A22168;
	fma.rn.f32 	%f36, %f32, %f35, %f34;
	mov.f32 	%f37, 0fA7C234C5;
	fma.rn.f32 	%f69, %f32, %f37, %f36;
	abs.f32 	%f3, %f1;
	setp.ltu.f32 	%p6, %f3, 0f47CE4780;
	add.s64 	%rd2, %rd1, 24;
	mov.u32 	%r119, %r123;
	mov.f32 	%f66, %f69;
	@%p6 bra 	$L__BB0_9;

	setp.eq.f32 	%p7, %f3, 0f7F800000;
	@%p7 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_3;

$L__BB0_8:
	mov.f32 	%f40, 0f00000000;
	mul.rn.f32 	%f66, %f1, %f40;
	mov.u32 	%r119, 0;
	bra.uni 	$L__BB0_9;

$L__BB0_3:
	mov.b32 	%r6, %f1;
	shr.u32 	%r54, %r6, 23;
	and.b32  	%r55, %r54, 255;
	add.s32 	%r7, %r55, -128;
	shl.b32 	%r56, %r6, 8;
	or.b32  	%r8, %r56, -2147483648;
	mov.u64 	%rd47, 0;
	mov.u32 	%r116, 0;
	mov.u64 	%rd46, __cudart_i2opi_f;
	mov.u64 	%rd45, %rd1;

$L__BB0_4:
	.pragma "nounroll";
	ld.global.nc.u32 	%r57, [%rd46];
	mad.wide.u32 	%rd21, %r57, %r8, %rd47;
	shr.u64 	%rd47, %rd21, 32;
	st.local.u32 	[%rd45], %rd21;
	add.s64 	%rd46, %rd46, 4;
	add.s64 	%rd45, %rd45, 4;
	add.s32 	%r116, %r116, 1;
	setp.ne.s32 	%p8, %r116, 6;
	@%p8 bra 	$L__BB0_4;

	shr.u32 	%r58, %r7, 5;
	mov.u32 	%r59, 4;
	sub.s32 	%r11, %r59, %r58;
	st.local.u32 	[%rd2], %rd47;
	mov.u32 	%r60, 6;
	sub.s32 	%r61, %r60, %r58;
	mul.wide.s32 	%rd22, %r61, 4;
	add.s64 	%rd23, %rd1, %rd22;
	ld.local.u32 	%r117, [%rd23];
	ld.local.u32 	%r118, [%rd23+-4];
	and.b32  	%r14, %r7, 31;
	setp.eq.s32 	%p9, %r14, 0;
	@%p9 bra 	$L__BB0_7;

	mov.u32 	%r62, 32;
	sub.s32 	%r63, %r62, %r14;
	shr.u32 	%r64, %r118, %r63;
	shl.b32 	%r65, %r117, %r14;
	add.s32 	%r117, %r64, %r65;
	mul.wide.s32 	%rd24, %r11, 4;
	add.s64 	%rd25, %rd1, %rd24;
	ld.local.u32 	%r66, [%rd25];
	shr.u32 	%r67, %r66, %r63;
	shl.b32 	%r68, %r118, %r14;
	add.s32 	%r118, %r67, %r68;

$L__BB0_7:
	and.b32  	%r69, %r6, -2147483648;
	shr.u32 	%r70, %r118, 30;
	shl.b32 	%r71, %r117, 2;
	or.b32  	%r72, %r70, %r71;
	shr.u32 	%r73, %r72, 31;
	shr.u32 	%r74, %r117, 30;
	add.s32 	%r75, %r73, %r74;
	neg.s32 	%r76, %r75;
	setp.eq.s32 	%p10, %r69, 0;
	selp.b32 	%r119, %r75, %r76, %p10;
	setp.ne.s32 	%p11, %r73, 0;
	xor.b32  	%r77, %r69, -2147483648;
	selp.b32 	%r78, %r77, %r69, %p11;
	selp.b32 	%r79, -1, 0, %p11;
	xor.b32  	%r80, %r72, %r79;
	shl.b32 	%r81, %r118, 2;
	xor.b32  	%r82, %r81, %r79;
	cvt.u64.u32 	%rd26, %r80;
	cvt.u64.u32 	%rd27, %r82;
	bfi.b64 	%rd28, %rd26, %rd27, 32, 32;
	cvt.rn.f64.s64 	%fd1, %rd28;
	mul.f64 	%fd2, %fd1, 0d3BF921FB54442D19;
	cvt.rn.f32.f64 	%f38, %fd2;
	setp.eq.s32 	%p12, %r78, 0;
	neg.f32 	%f39, %f38;
	selp.f32 	%f66, %f38, %f39, %p12;

$L__BB0_9:
	add.s32 	%r21, %r119, 1;
	and.b32  	%r22, %r21, 1;
	setp.eq.s32 	%p13, %r22, 0;
	selp.f32 	%f7, %f66, 0f3F800000, %p13;
	mul.rn.f32 	%f8, %f66, %f66;
	mov.f32 	%f67, 0fB94D4153;
	@%p13 bra 	$L__BB0_11;

	mov.f32 	%f42, 0fBAB607ED;
	mov.f32 	%f43, 0f37CBAC00;
	fma.rn.f32 	%f67, %f43, %f8, %f42;

$L__BB0_11:
	selp.f32 	%f44, 0f3C0885E4, 0f3D2AAABB, %p13;
	fma.rn.f32 	%f45, %f67, %f8, %f44;
	selp.f32 	%f46, 0fBE2AAAA8, 0fBEFFFFFF, %p13;
	fma.rn.f32 	%f47, %f45, %f8, %f46;
	mov.f32 	%f48, 0f00000000;
	fma.rn.f32 	%f49, %f8, %f7, %f48;
	fma.rn.f32 	%f68, %f47, %f49, %f7;
	and.b32  	%r84, %r21, 2;
	setp.eq.s32 	%p15, %r84, 0;
	@%p15 bra 	$L__BB0_13;

	mov.f32 	%f51, 0fBF800000;
	fma.rn.f32 	%f68, %f68, %f51, %f48;

$L__BB0_13:
	cvta.to.global.u64 	%rd29, %rd16;
	cvt.s64.s32 	%rd9, %r4;
	mul.wide.s32 	%rd30, %r4, 4;
	add.s64 	%rd31, %rd29, %rd30;
	st.global.f32 	[%rd31], %f68;
	@%p6 bra 	$L__BB0_21;

	setp.eq.f32 	%p17, %f3, 0f7F800000;
	@%p17 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_15;

$L__BB0_20:
	mov.f32 	%f54, 0f00000000;
	mul.rn.f32 	%f69, %f1, %f54;
	mov.u32 	%r123, 0;
	bra.uni 	$L__BB0_21;

$L__BB0_15:
	mov.b32 	%r23, %f1;
	shr.u32 	%r86, %r23, 23;
	and.b32  	%r87, %r86, 255;
	add.s32 	%r24, %r87, -128;
	shl.b32 	%r88, %r23, 8;
	or.b32  	%r25, %r88, -2147483648;
	shr.u32 	%r26, %r24, 5;
	mov.u64 	%rd50, 0;
	mov.u32 	%r120, 0;
	mov.u64 	%rd49, __cudart_i2opi_f;
	mov.u64 	%rd48, %rd1;

$L__BB0_16:
	.pragma "nounroll";
	ld.global.nc.u32 	%r89, [%rd49];
	mad.wide.u32 	%rd34, %r89, %r25, %rd50;
	shr.u64 	%rd50, %rd34, 32;
	st.local.u32 	[%rd48], %rd34;
	add.s64 	%rd49, %rd49, 4;
	add.s64 	%rd48, %rd48, 4;
	add.s32 	%r120, %r120, 1;
	setp.ne.s32 	%p18, %r120, 6;
	@%p18 bra 	$L__BB0_16;

	st.local.u32 	[%rd2], %rd50;
	mov.u32 	%r90, 4;
	sub.s32 	%r29, %r90, %r26;
	mov.u32 	%r91, 6;
	sub.s32 	%r92, %r91, %r26;
	mul.wide.s32 	%rd35, %r92, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.local.u32 	%r121, [%rd36];
	ld.local.u32 	%r122, [%rd36+-4];
	and.b32  	%r32, %r24, 31;
	setp.eq.s32 	%p19, %r32, 0;
	@%p19 bra 	$L__BB0_19;

	mov.u32 	%r93, 32;
	sub.s32 	%r94, %r93, %r32;
	shr.u32 	%r95, %r122, %r94;
	shl.b32 	%r96, %r121, %r32;
	add.s32 	%r121, %r95, %r96;
	mul.wide.s32 	%rd37, %r29, 4;
	add.s64 	%rd38, %rd1, %rd37;
	ld.local.u32 	%r97, [%rd38];
	shr.u32 	%r98, %r97, %r94;
	shl.b32 	%r99, %r122, %r32;
	add.s32 	%r122, %r98, %r99;

$L__BB0_19:
	and.b32  	%r100, %r23, -2147483648;
	shr.u32 	%r101, %r122, 30;
	shl.b32 	%r102, %r121, 2;
	or.b32  	%r103, %r101, %r102;
	shr.u32 	%r104, %r103, 31;
	shr.u32 	%r105, %r121, 30;
	add.s32 	%r106, %r104, %r105;
	neg.s32 	%r107, %r106;
	setp.eq.s32 	%p20, %r100, 0;
	selp.b32 	%r123, %r106, %r107, %p20;
	setp.ne.s32 	%p21, %r104, 0;
	xor.b32  	%r108, %r100, -2147483648;
	selp.b32 	%r109, %r108, %r100, %p21;
	selp.b32 	%r110, -1, 0, %p21;
	xor.b32  	%r111, %r103, %r110;
	shl.b32 	%r112, %r122, 2;
	xor.b32  	%r113, %r112, %r110;
	cvt.u64.u32 	%rd39, %r111;
	cvt.u64.u32 	%rd40, %r113;
	bfi.b64 	%rd41, %rd39, %rd40, 32, 32;
	cvt.rn.f64.s64 	%fd3, %rd41;
	mul.f64 	%fd4, %fd3, 0d3BF921FB54442D19;
	cvt.rn.f32.f64 	%f52, %fd4;
	setp.eq.s32 	%p22, %r109, 0;
	neg.f32 	%f53, %f52;
	selp.f32 	%f69, %f52, %f53, %p22;

$L__BB0_21:
	and.b32  	%r39, %r123, 1;
	setp.eq.s32 	%p23, %r39, 0;
	selp.f32 	%f17, %f69, 0f3F800000, %p23;
	mul.rn.f32 	%f18, %f69, %f69;
	mov.f32 	%f70, 0fB94D4153;
	@%p23 bra 	$L__BB0_23;

	mov.f32 	%f56, 0fBAB607ED;
	mov.f32 	%f57, 0f37CBAC00;
	fma.rn.f32 	%f70, %f57, %f18, %f56;

$L__BB0_23:
	selp.f32 	%f58, 0f3C0885E4, 0f3D2AAABB, %p23;
	fma.rn.f32 	%f59, %f70, %f18, %f58;
	selp.f32 	%f60, 0fBE2AAAA8, 0fBEFFFFFF, %p23;
	fma.rn.f32 	%f61, %f59, %f18, %f60;
	mov.f32 	%f62, 0f00000000;
	fma.rn.f32 	%f63, %f18, %f17, %f62;
	fma.rn.f32 	%f71, %f61, %f63, %f17;
	and.b32  	%r115, %r123, 2;
	setp.eq.s32 	%p25, %r115, 0;
	@%p25 bra 	$L__BB0_25;

	mov.f32 	%f65, 0fBF800000;
	fma.rn.f32 	%f71, %f71, %f65, %f62;

$L__BB0_25:
	cvta.to.global.u64 	%rd42, %rd17;
	shl.b64 	%rd43, %rd9, 2;
	add.s64 	%rd44, %rd42, %rd43;
	st.global.f32 	[%rd44], %f71;

$L__BB0_26:
	ret;

}

`
)

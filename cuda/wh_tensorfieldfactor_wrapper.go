package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for tensorFieldFactor kernel
var tensorFieldFactor_code cu.Function

// Stores the arguments for tensorFieldFactor kernel invocation
type tensorFieldFactor_args_t struct {
	arg_dst unsafe.Pointer
	arg_ms  unsafe.Pointer
	arg_N   int
	argptr  [3]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for tensorFieldFactor kernel invocation
var tensorFieldFactor_args tensorFieldFactor_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	tensorFieldFactor_args.argptr[0] = unsafe.Pointer(&tensorFieldFactor_args.arg_dst)
	tensorFieldFactor_args.argptr[1] = unsafe.Pointer(&tensorFieldFactor_args.arg_ms)
	tensorFieldFactor_args.argptr[2] = unsafe.Pointer(&tensorFieldFactor_args.arg_N)
}

// Wrapper for tensorFieldFactor CUDA kernel, asynchronous.
func k_tensorFieldFactor_async(dst unsafe.Pointer, ms unsafe.Pointer, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("tensorFieldFactor")
	}

	tensorFieldFactor_args.Lock()
	defer tensorFieldFactor_args.Unlock()

	if tensorFieldFactor_code == 0 {
		tensorFieldFactor_code = fatbinLoad(tensorFieldFactor_map, "tensorFieldFactor")
	}

	tensorFieldFactor_args.arg_dst = dst
	tensorFieldFactor_args.arg_ms = ms
	tensorFieldFactor_args.arg_N = N

	args := tensorFieldFactor_args.argptr[:]
	cu.LaunchKernel(tensorFieldFactor_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("tensorFieldFactor")
	}
}

// maps compute capability on PTX code for tensorFieldFactor kernel.
var tensorFieldFactor_map = map[int]string{0: "",
	50: tensorFieldFactor_ptx_50}

// tensorFieldFactor PTX code for various compute capabilities.
const (
	tensorFieldFactor_ptx_50 = `
.version 7.8
.target sm_50
.address_size 64

	// .globl	tensorFieldFactor

.visible .entry tensorFieldFactor(
	.param .u64 tensorFieldFactor_param_0,
	.param .u64 tensorFieldFactor_param_1,
	.param .u32 tensorFieldFactor_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<8>;


	ld.param.u64 	%rd2, [tensorFieldFactor_param_0];
	ld.param.u64 	%rd3, [tensorFieldFactor_param_1];
	ld.param.u32 	%r2, [tensorFieldFactor_param_2];
	mov.u32 	%r3, %ctaid.y;
	mov.u32 	%r4, %nctaid.x;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_4;

	cvta.to.global.u64 	%rd4, %rd3;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	setp.eq.f32 	%p2, %f1, 0f00000000;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd1, %rd7, %rd5;
	@%p2 bra 	$L__BB0_3;
	bra.uni 	$L__BB0_2;

$L__BB0_3:
	mov.u32 	%r9, 0;
	st.global.u32 	[%rd1], %r9;
	bra.uni 	$L__BB0_4;

$L__BB0_2:
	mov.f32 	%f2, 0fBF800000;
	div.rn.f32 	%f3, %f2, %f1;
	st.global.f32 	[%rd1], %f3;

$L__BB0_4:
	ret;

}

`
)

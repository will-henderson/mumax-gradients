package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for tensorProduct kernel
var tensorProduct_code cu.Function

// Stores the arguments for tensorProduct kernel invocation
type tensorProduct_args_t struct {
	arg_dst unsafe.Pointer
	arg_inx unsafe.Pointer
	arg_iny unsafe.Pointer
	arg_inz unsafe.Pointer
	arg_Nx  int
	arg_Ny  int
	arg_Nz  int
	argptr  [7]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for tensorProduct kernel invocation
var tensorProduct_args tensorProduct_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	tensorProduct_args.argptr[0] = unsafe.Pointer(&tensorProduct_args.arg_dst)
	tensorProduct_args.argptr[1] = unsafe.Pointer(&tensorProduct_args.arg_inx)
	tensorProduct_args.argptr[2] = unsafe.Pointer(&tensorProduct_args.arg_iny)
	tensorProduct_args.argptr[3] = unsafe.Pointer(&tensorProduct_args.arg_inz)
	tensorProduct_args.argptr[4] = unsafe.Pointer(&tensorProduct_args.arg_Nx)
	tensorProduct_args.argptr[5] = unsafe.Pointer(&tensorProduct_args.arg_Ny)
	tensorProduct_args.argptr[6] = unsafe.Pointer(&tensorProduct_args.arg_Nz)
}

// Wrapper for tensorProduct CUDA kernel, asynchronous.
func k_tensorProduct_async(dst unsafe.Pointer, inx unsafe.Pointer, iny unsafe.Pointer, inz unsafe.Pointer, Nx int, Ny int, Nz int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("tensorProduct")
	}

	tensorProduct_args.Lock()
	defer tensorProduct_args.Unlock()

	if tensorProduct_code == 0 {
		tensorProduct_code = fatbinLoad(tensorProduct_map, "tensorProduct")
	}

	tensorProduct_args.arg_dst = dst
	tensorProduct_args.arg_inx = inx
	tensorProduct_args.arg_iny = iny
	tensorProduct_args.arg_inz = inz
	tensorProduct_args.arg_Nx = Nx
	tensorProduct_args.arg_Ny = Ny
	tensorProduct_args.arg_Nz = Nz

	args := tensorProduct_args.argptr[:]
	cu.LaunchKernel(tensorProduct_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("tensorProduct")
	}
}

// maps compute capability on PTX code for tensorProduct kernel.
var tensorProduct_map = map[int]string{0: "",
	50: tensorProduct_ptx_50}

// tensorProduct PTX code for various compute capabilities.
const (
	tensorProduct_ptx_50 = `
.version 7.8
.target sm_50
.address_size 64

	// .globl	tensorProduct

.visible .entry tensorProduct(
	.param .u64 tensorProduct_param_0,
	.param .u64 tensorProduct_param_1,
	.param .u64 tensorProduct_param_2,
	.param .u64 tensorProduct_param_3,
	.param .u32 tensorProduct_param_4,
	.param .u32 tensorProduct_param_5,
	.param .u32 tensorProduct_param_6
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<17>;


	ld.param.u64 	%rd1, [tensorProduct_param_0];
	ld.param.u64 	%rd2, [tensorProduct_param_1];
	ld.param.u64 	%rd3, [tensorProduct_param_2];
	ld.param.u64 	%rd4, [tensorProduct_param_3];
	ld.param.u32 	%r4, [tensorProduct_param_4];
	ld.param.u32 	%r5, [tensorProduct_param_5];
	ld.param.u32 	%r6, [tensorProduct_param_6];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r14, %r13, %r15;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd5, %rd2;
	mad.lo.s32 	%r16, %r3, %r5, %r2;
	mad.lo.s32 	%r17, %r16, %r4, %r1;
	mul.wide.s32 	%rd6, %r1, 4;
	add.s64 	%rd7, %rd5, %rd6;
	cvta.to.global.u64 	%rd8, %rd3;
	mul.wide.s32 	%rd9, %r2, 4;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.nc.f32 	%f1, [%rd10];
	ld.global.nc.f32 	%f2, [%rd7];
	mul.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd11, %rd4;
	mul.wide.s32 	%rd12, %r3, 4;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.nc.f32 	%f4, [%rd13];
	mul.f32 	%f5, %f3, %f4;
	cvta.to.global.u64 	%rd14, %rd1;
	mul.wide.s32 	%rd15, %r17, 4;
	add.s64 	%rd16, %rd14, %rd15;
	st.global.f32 	[%rd16], %f5;

$L__BB0_2:
	ret;

}

`
)

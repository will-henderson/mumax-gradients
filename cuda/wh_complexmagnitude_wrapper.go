package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for complexMagnitude kernel
var complexMagnitude_code cu.Function

// Stores the arguments for complexMagnitude kernel invocation
type complexMagnitude_args_t struct {
	arg_dst unsafe.Pointer
	arg_src unsafe.Pointer
	arg_N   int
	argptr  [3]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for complexMagnitude kernel invocation
var complexMagnitude_args complexMagnitude_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	complexMagnitude_args.argptr[0] = unsafe.Pointer(&complexMagnitude_args.arg_dst)
	complexMagnitude_args.argptr[1] = unsafe.Pointer(&complexMagnitude_args.arg_src)
	complexMagnitude_args.argptr[2] = unsafe.Pointer(&complexMagnitude_args.arg_N)
}

// Wrapper for complexMagnitude CUDA kernel, asynchronous.
func k_complexMagnitude_async(dst unsafe.Pointer, src unsafe.Pointer, N int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("complexMagnitude")
	}

	complexMagnitude_args.Lock()
	defer complexMagnitude_args.Unlock()

	if complexMagnitude_code == 0 {
		complexMagnitude_code = fatbinLoad(complexMagnitude_map, "complexMagnitude")
	}

	complexMagnitude_args.arg_dst = dst
	complexMagnitude_args.arg_src = src
	complexMagnitude_args.arg_N = N

	args := complexMagnitude_args.argptr[:]
	cu.LaunchKernel(complexMagnitude_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("complexMagnitude")
	}
}

// maps compute capability on PTX code for complexMagnitude kernel.
var complexMagnitude_map = map[int]string{0: "",
	80: complexMagnitude_ptx_80}

// complexMagnitude PTX code for various compute capabilities.
const (
	complexMagnitude_ptx_80 = `
.version 8.2
.target sm_80
.address_size 64

	// .globl	complexMagnitude

.visible .entry complexMagnitude(
	.param .u64 complexMagnitude_param_0,
	.param .u64 complexMagnitude_param_1,
	.param .u32 complexMagnitude_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<6>;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [complexMagnitude_param_0];
	ld.param.u64 	%rd2, [complexMagnitude_param_1];
	ld.param.u32 	%r2, [complexMagnitude_param_2];
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r4, %r3, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd3, %rd1;
	shl.b32 	%r9, %r1, 1;
	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r9, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f1, [%rd6];
	ld.global.nc.f32 	%f2, [%rd6+4];
	mul.f32 	%f3, %f2, %f2;
	fma.rn.f32 	%f4, %f1, %f1, %f3;
	sqrt.rn.f32 	%f5, %f4;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd3, %rd7;
	st.global.f32 	[%rd8], %f5;

$L__BB0_2:
	ret;

}

`
)

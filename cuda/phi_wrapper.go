package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for setPhi kernel
var setPhi_code cu.Function

// Stores the arguments for setPhi kernel invocation
type setPhi_args_t struct {
	arg_phi unsafe.Pointer
	arg_mx  unsafe.Pointer
	arg_my  unsafe.Pointer
	arg_Nx  int
	arg_Ny  int
	arg_Nz  int
	argptr  [6]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for setPhi kernel invocation
var setPhi_args setPhi_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	setPhi_args.argptr[0] = unsafe.Pointer(&setPhi_args.arg_phi)
	setPhi_args.argptr[1] = unsafe.Pointer(&setPhi_args.arg_mx)
	setPhi_args.argptr[2] = unsafe.Pointer(&setPhi_args.arg_my)
	setPhi_args.argptr[3] = unsafe.Pointer(&setPhi_args.arg_Nx)
	setPhi_args.argptr[4] = unsafe.Pointer(&setPhi_args.arg_Ny)
	setPhi_args.argptr[5] = unsafe.Pointer(&setPhi_args.arg_Nz)
}

// Wrapper for setPhi CUDA kernel, asynchronous.
func k_setPhi_async(phi unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, Nx int, Ny int, Nz int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("setPhi")
	}

	setPhi_args.Lock()
	defer setPhi_args.Unlock()

	if setPhi_code == 0 {
		setPhi_code = fatbinLoad(setPhi_map, "setPhi")
	}

	setPhi_args.arg_phi = phi
	setPhi_args.arg_mx = mx
	setPhi_args.arg_my = my
	setPhi_args.arg_Nx = Nx
	setPhi_args.arg_Ny = Ny
	setPhi_args.arg_Nz = Nz

	args := setPhi_args.argptr[:]
	cu.LaunchKernel(setPhi_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("setPhi")
	}
}

// maps compute capability on PTX code for setPhi kernel.
var setPhi_map = map[int]string{0: "",
	80: setPhi_ptx_80}

// setPhi PTX code for various compute capabilities.
const (
	setPhi_ptx_80 = `
.version 8.2
.target sm_80
.address_size 64

	// .globl	setPhi

.visible .entry setPhi(
	.param .u64 setPhi_param_0,
	.param .u64 setPhi_param_1,
	.param .u64 setPhi_param_2,
	.param .u32 setPhi_param_3,
	.param .u32 setPhi_param_4,
	.param .u32 setPhi_param_5
)
{
	.reg .pred 	%p<16>;
	.reg .f32 	%f<36>;
	.reg .b32 	%r<34>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd2, [setPhi_param_0];
	ld.param.u64 	%rd3, [setPhi_param_1];
	ld.param.u64 	%rd4, [setPhi_param_2];
	ld.param.u32 	%r4, [setPhi_param_3];
	ld.param.u32 	%r5, [setPhi_param_4];
	ld.param.u32 	%r6, [setPhi_param_5];
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %ntid.x;
	mov.u32 	%r9, %tid.x;
	mad.lo.s32 	%r1, %r7, %r8, %r9;
	mov.u32 	%r10, %ntid.y;
	mov.u32 	%r11, %ctaid.y;
	mov.u32 	%r12, %tid.y;
	mad.lo.s32 	%r2, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.z;
	mov.u32 	%r14, %ctaid.z;
	mov.u32 	%r15, %tid.z;
	mad.lo.s32 	%r3, %r14, %r13, %r15;
	setp.ge.s32 	%p1, %r1, %r4;
	setp.ge.s32 	%p2, %r2, %r5;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r6;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;

	cvta.to.global.u64 	%rd5, %rd4;
	mad.lo.s32 	%r16, %r3, %r5, %r2;
	mad.lo.s32 	%r17, %r16, %r4, %r1;
	cvt.s64.s32 	%rd1, %r17;
	mul.wide.s32 	%rd6, %r17, 4;
	add.s64 	%rd7, %rd5, %rd6;
	cvta.to.global.u64 	%rd8, %rd3;
	add.s64 	%rd9, %rd8, %rd6;
	ld.global.nc.f32 	%f1, [%rd9];
	abs.f32 	%f2, %f1;
	ld.global.nc.f32 	%f3, [%rd7];
	abs.f32 	%f4, %f3;
	setp.eq.f32 	%p6, %f2, 0f00000000;
	setp.eq.f32 	%p7, %f4, 0f00000000;
	and.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_5;
	bra.uni 	$L__BB0_2;

$L__BB0_5:
	mov.b32 	%r28, %f1;
	shr.s32 	%r29, %r28, 31;
	and.b32  	%r30, %r29, 1078530011;
	mov.b32 	%r31, %f3;
	and.b32  	%r32, %r31, -2147483648;
	or.b32  	%r33, %r30, %r32;
	mov.b32 	%f35, %r33;
	bra.uni 	$L__BB0_6;

$L__BB0_2:
	setp.eq.f32 	%p9, %f2, 0f7F800000;
	setp.eq.f32 	%p10, %f4, 0f7F800000;
	and.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;

$L__BB0_4:
	mov.b32 	%r23, %f1;
	setp.lt.s32 	%p15, %r23, 0;
	selp.b32 	%r24, 1075235812, 1061752795, %p15;
	mov.b32 	%r25, %f3;
	and.b32  	%r26, %r25, -2147483648;
	or.b32  	%r27, %r24, %r26;
	mov.b32 	%f35, %r27;
	bra.uni 	$L__BB0_6;

$L__BB0_3:
	max.f32 	%f9, %f4, %f2;
	min.f32 	%f10, %f4, %f2;
	div.rn.f32 	%f11, %f10, %f9;
	mul.rn.f32 	%f12, %f11, %f11;
	mov.f32 	%f13, 0fC0B59883;
	mov.f32 	%f14, 0fBF52C7EA;
	fma.rn.f32 	%f15, %f12, %f14, %f13;
	mov.f32 	%f16, 0fC0D21907;
	fma.rn.f32 	%f17, %f15, %f12, %f16;
	mul.f32 	%f18, %f12, %f17;
	mul.f32 	%f19, %f11, %f18;
	add.f32 	%f20, %f12, 0f41355DC0;
	mov.f32 	%f21, 0f41E6BD60;
	fma.rn.f32 	%f22, %f20, %f12, %f21;
	mov.f32 	%f23, 0f419D92C8;
	fma.rn.f32 	%f24, %f22, %f12, %f23;
	rcp.rn.f32 	%f25, %f24;
	fma.rn.f32 	%f26, %f19, %f25, %f11;
	mov.f32 	%f27, 0f3FC90FDB;
	sub.f32 	%f28, %f27, %f26;
	setp.gt.f32 	%p12, %f4, %f2;
	selp.f32 	%f29, %f28, %f26, %p12;
	mov.b32 	%r18, %f1;
	setp.lt.s32 	%p13, %r18, 0;
	mov.f32 	%f30, 0f40490FDB;
	sub.f32 	%f31, %f30, %f29;
	selp.f32 	%f32, %f31, %f29, %p13;
	mov.b32 	%r19, %f32;
	mov.b32 	%r20, %f3;
	and.b32  	%r21, %r20, -2147483648;
	or.b32  	%r22, %r21, %r19;
	mov.b32 	%f33, %r22;
	add.f32 	%f34, %f2, %f4;
	setp.le.f32 	%p14, %f34, 0f7F800000;
	selp.f32 	%f35, %f33, %f34, %p14;

$L__BB0_6:
	cvta.to.global.u64 	%rd10, %rd2;
	shl.b64 	%rd11, %rd1, 2;
	add.s64 	%rd12, %rd10, %rd11;
	st.global.f32 	[%rd12], %f35;

$L__BB0_7:
	ret;

}

`
)

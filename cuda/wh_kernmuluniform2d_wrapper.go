package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for kernmulUniform2D kernel
var kernmulUniform2D_code cu.Function

// Stores the arguments for kernmulUniform2D kernel invocation
type kernmulUniform2D_args_t struct {
	arg_Fxx    unsafe.Pointer
	arg_Fyy    unsafe.Pointer
	arg_Fzz    unsafe.Pointer
	arg_Fxy    unsafe.Pointer
	arg_fftKxx unsafe.Pointer
	arg_fftKyy unsafe.Pointer
	arg_fftKzz unsafe.Pointer
	arg_fftKxy unsafe.Pointer
	arg_ftu    unsafe.Pointer
	arg_Nx     int
	arg_Ny     int
	arg_Nz     int
	argptr     [12]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for kernmulUniform2D kernel invocation
var kernmulUniform2D_args kernmulUniform2D_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	kernmulUniform2D_args.argptr[0] = unsafe.Pointer(&kernmulUniform2D_args.arg_Fxx)
	kernmulUniform2D_args.argptr[1] = unsafe.Pointer(&kernmulUniform2D_args.arg_Fyy)
	kernmulUniform2D_args.argptr[2] = unsafe.Pointer(&kernmulUniform2D_args.arg_Fzz)
	kernmulUniform2D_args.argptr[3] = unsafe.Pointer(&kernmulUniform2D_args.arg_Fxy)
	kernmulUniform2D_args.argptr[4] = unsafe.Pointer(&kernmulUniform2D_args.arg_fftKxx)
	kernmulUniform2D_args.argptr[5] = unsafe.Pointer(&kernmulUniform2D_args.arg_fftKyy)
	kernmulUniform2D_args.argptr[6] = unsafe.Pointer(&kernmulUniform2D_args.arg_fftKzz)
	kernmulUniform2D_args.argptr[7] = unsafe.Pointer(&kernmulUniform2D_args.arg_fftKxy)
	kernmulUniform2D_args.argptr[8] = unsafe.Pointer(&kernmulUniform2D_args.arg_ftu)
	kernmulUniform2D_args.argptr[9] = unsafe.Pointer(&kernmulUniform2D_args.arg_Nx)
	kernmulUniform2D_args.argptr[10] = unsafe.Pointer(&kernmulUniform2D_args.arg_Ny)
	kernmulUniform2D_args.argptr[11] = unsafe.Pointer(&kernmulUniform2D_args.arg_Nz)
}

// Wrapper for kernmulUniform2D CUDA kernel, asynchronous.
func k_kernmulUniform2D_async(Fxx unsafe.Pointer, Fyy unsafe.Pointer, Fzz unsafe.Pointer, Fxy unsafe.Pointer, fftKxx unsafe.Pointer, fftKyy unsafe.Pointer, fftKzz unsafe.Pointer, fftKxy unsafe.Pointer, ftu unsafe.Pointer, Nx int, Ny int, Nz int, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("kernmulUniform2D")
	}

	kernmulUniform2D_args.Lock()
	defer kernmulUniform2D_args.Unlock()

	if kernmulUniform2D_code == 0 {
		kernmulUniform2D_code = fatbinLoad(kernmulUniform2D_map, "kernmulUniform2D")
	}

	kernmulUniform2D_args.arg_Fxx = Fxx
	kernmulUniform2D_args.arg_Fyy = Fyy
	kernmulUniform2D_args.arg_Fzz = Fzz
	kernmulUniform2D_args.arg_Fxy = Fxy
	kernmulUniform2D_args.arg_fftKxx = fftKxx
	kernmulUniform2D_args.arg_fftKyy = fftKyy
	kernmulUniform2D_args.arg_fftKzz = fftKzz
	kernmulUniform2D_args.arg_fftKxy = fftKxy
	kernmulUniform2D_args.arg_ftu = ftu
	kernmulUniform2D_args.arg_Nx = Nx
	kernmulUniform2D_args.arg_Ny = Ny
	kernmulUniform2D_args.arg_Nz = Nz

	args := kernmulUniform2D_args.argptr[:]
	cu.LaunchKernel(kernmulUniform2D_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("kernmulUniform2D")
	}
}

// maps compute capability on PTX code for kernmulUniform2D kernel.
var kernmulUniform2D_map = map[int]string{0: "",
	50: kernmulUniform2D_ptx_50}

// kernmulUniform2D PTX code for various compute capabilities.
const (
	kernmulUniform2D_ptx_50 = `
.version 7.8
.target sm_50
.address_size 64

	// .globl	kernmulUniform2D

.visible .entry kernmulUniform2D(
	.param .u64 kernmulUniform2D_param_0,
	.param .u64 kernmulUniform2D_param_1,
	.param .u64 kernmulUniform2D_param_2,
	.param .u64 kernmulUniform2D_param_3,
	.param .u64 kernmulUniform2D_param_4,
	.param .u64 kernmulUniform2D_param_5,
	.param .u64 kernmulUniform2D_param_6,
	.param .u64 kernmulUniform2D_param_7,
	.param .u64 kernmulUniform2D_param_8,
	.param .u32 kernmulUniform2D_param_9,
	.param .u32 kernmulUniform2D_param_10,
	.param .u32 kernmulUniform2D_param_11
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<17>;
	.reg .b32 	%r<19>;
	.reg .b64 	%rd<30>;


	ld.param.u64 	%rd1, [kernmulUniform2D_param_0];
	ld.param.u64 	%rd2, [kernmulUniform2D_param_1];
	ld.param.u64 	%rd3, [kernmulUniform2D_param_2];
	ld.param.u64 	%rd4, [kernmulUniform2D_param_3];
	ld.param.u64 	%rd5, [kernmulUniform2D_param_4];
	ld.param.u64 	%rd6, [kernmulUniform2D_param_5];
	ld.param.u64 	%rd7, [kernmulUniform2D_param_6];
	ld.param.u64 	%rd8, [kernmulUniform2D_param_7];
	ld.param.u64 	%rd9, [kernmulUniform2D_param_8];
	ld.param.u32 	%r3, [kernmulUniform2D_param_9];
	ld.param.u32 	%r4, [kernmulUniform2D_param_10];
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %tid.x;
	mad.lo.s32 	%r1, %r6, %r5, %r7;
	mov.u32 	%r8, %ntid.y;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r2, %r9, %r8, %r10;
	setp.ge.s32 	%p1, %r1, %r3;
	setp.ge.s32 	%p2, %r2, %r4;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd10, %rd5;
	mad.lo.s32 	%r11, %r2, %r3, %r1;
	shl.b32 	%r12, %r11, 1;
	cvta.to.global.u64 	%rd11, %rd9;
	mul.wide.s32 	%rd12, %r12, 4;
	add.s64 	%rd13, %rd11, %rd12;
	ld.global.nc.f32 	%f1, [%rd13+4];
	shr.u32 	%r13, %r4, 31;
	add.s32 	%r14, %r4, %r13;
	shr.s32 	%r15, %r14, 1;
	setp.gt.s32 	%p4, %r2, %r15;
	sub.s32 	%r16, %r4, %r2;
	selp.b32 	%r17, %r16, %r2, %p4;
	selp.f32 	%f2, 0fBF800000, 0f3F800000, %p4;
	mad.lo.s32 	%r18, %r17, %r3, %r1;
	mul.wide.s32 	%rd14, %r18, 4;
	add.s64 	%rd15, %rd10, %rd14;
	cvta.to.global.u64 	%rd16, %rd6;
	add.s64 	%rd17, %rd16, %rd14;
	ld.global.nc.f32 	%f3, [%rd17];
	cvta.to.global.u64 	%rd18, %rd7;
	add.s64 	%rd19, %rd18, %rd14;
	ld.global.nc.f32 	%f4, [%rd19];
	cvta.to.global.u64 	%rd20, %rd8;
	add.s64 	%rd21, %rd20, %rd14;
	ld.global.nc.f32 	%f5, [%rd21];
	mul.f32 	%f6, %f2, %f5;
	ld.global.nc.f32 	%f7, [%rd15];
	ld.global.nc.f32 	%f8, [%rd13];
	mul.f32 	%f9, %f8, %f7;
	cvta.to.global.u64 	%rd22, %rd1;
	add.s64 	%rd23, %rd22, %rd12;
	st.global.f32 	[%rd23], %f9;
	mul.f32 	%f10, %f1, %f7;
	st.global.f32 	[%rd23+4], %f10;
	mul.f32 	%f11, %f8, %f6;
	cvta.to.global.u64 	%rd24, %rd4;
	add.s64 	%rd25, %rd24, %rd12;
	st.global.f32 	[%rd25], %f11;
	mul.f32 	%f12, %f1, %f6;
	st.global.f32 	[%rd25+4], %f12;
	mul.f32 	%f13, %f8, %f3;
	cvta.to.global.u64 	%rd26, %rd2;
	add.s64 	%rd27, %rd26, %rd12;
	st.global.f32 	[%rd27], %f13;
	mul.f32 	%f14, %f1, %f3;
	st.global.f32 	[%rd27+4], %f14;
	mul.f32 	%f15, %f8, %f4;
	cvta.to.global.u64 	%rd28, %rd3;
	add.s64 	%rd29, %rd28, %rd12;
	st.global.f32 	[%rd29], %f15;
	mul.f32 	%f16, %f1, %f4;
	st.global.f32 	[%rd29+4], %f16;

$L__BB0_2:
	ret;

}

`
)

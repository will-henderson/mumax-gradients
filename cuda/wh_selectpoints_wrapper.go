package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for selectPoints kernel
var selectPoints_code cu.Function

// Stores the arguments for selectPoints kernel invocation
type selectPoints_args_t struct {
	arg_dst      unsafe.Pointer
	arg_nSamples int
	arg_src      unsafe.Pointer
	arg_Nx       int
	arg_Ny       int
	arg_Nz       int
	arg_sampleX  unsafe.Pointer
	arg_sampleY  unsafe.Pointer
	arg_sampleZ  unsafe.Pointer
	argptr       [9]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for selectPoints kernel invocation
var selectPoints_args selectPoints_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	selectPoints_args.argptr[0] = unsafe.Pointer(&selectPoints_args.arg_dst)
	selectPoints_args.argptr[1] = unsafe.Pointer(&selectPoints_args.arg_nSamples)
	selectPoints_args.argptr[2] = unsafe.Pointer(&selectPoints_args.arg_src)
	selectPoints_args.argptr[3] = unsafe.Pointer(&selectPoints_args.arg_Nx)
	selectPoints_args.argptr[4] = unsafe.Pointer(&selectPoints_args.arg_Ny)
	selectPoints_args.argptr[5] = unsafe.Pointer(&selectPoints_args.arg_Nz)
	selectPoints_args.argptr[6] = unsafe.Pointer(&selectPoints_args.arg_sampleX)
	selectPoints_args.argptr[7] = unsafe.Pointer(&selectPoints_args.arg_sampleY)
	selectPoints_args.argptr[8] = unsafe.Pointer(&selectPoints_args.arg_sampleZ)
}

// Wrapper for selectPoints CUDA kernel, asynchronous.
func k_selectPoints_async(dst unsafe.Pointer, nSamples int, src unsafe.Pointer, Nx int, Ny int, Nz int, sampleX unsafe.Pointer, sampleY unsafe.Pointer, sampleZ unsafe.Pointer, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("selectPoints")
	}

	selectPoints_args.Lock()
	defer selectPoints_args.Unlock()

	if selectPoints_code == 0 {
		selectPoints_code = fatbinLoad(selectPoints_map, "selectPoints")
	}

	selectPoints_args.arg_dst = dst
	selectPoints_args.arg_nSamples = nSamples
	selectPoints_args.arg_src = src
	selectPoints_args.arg_Nx = Nx
	selectPoints_args.arg_Ny = Ny
	selectPoints_args.arg_Nz = Nz
	selectPoints_args.arg_sampleX = sampleX
	selectPoints_args.arg_sampleY = sampleY
	selectPoints_args.arg_sampleZ = sampleZ

	args := selectPoints_args.argptr[:]
	cu.LaunchKernel(selectPoints_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("selectPoints")
	}
}

// maps compute capability on PTX code for selectPoints kernel.
var selectPoints_map = map[int]string{0: "",
	80: selectPoints_ptx_80}

// selectPoints PTX code for various compute capabilities.
const (
	selectPoints_ptx_80 = `
.version 8.2
.target sm_80
.address_size 64

	// .globl	selectPoints

.visible .entry selectPoints(
	.param .u64 selectPoints_param_0,
	.param .u32 selectPoints_param_1,
	.param .u64 selectPoints_param_2,
	.param .u32 selectPoints_param_3,
	.param .u32 selectPoints_param_4,
	.param .u32 selectPoints_param_5,
	.param .u64 selectPoints_param_6,
	.param .u64 selectPoints_param_7,
	.param .u64 selectPoints_param_8
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<18>;
	.reg .b64 	%rd<19>;


	ld.param.u64 	%rd1, [selectPoints_param_0];
	ld.param.u32 	%r4, [selectPoints_param_1];
	ld.param.u64 	%rd2, [selectPoints_param_2];
	ld.param.u32 	%r2, [selectPoints_param_3];
	ld.param.u32 	%r3, [selectPoints_param_4];
	ld.param.u64 	%rd3, [selectPoints_param_6];
	ld.param.u64 	%rd4, [selectPoints_param_7];
	ld.param.u64 	%rd5, [selectPoints_param_8];
	mov.u32 	%r5, %nctaid.x;
	mov.u32 	%r6, %ctaid.y;
	mov.u32 	%r7, %ctaid.x;
	mad.lo.s32 	%r8, %r6, %r5, %r7;
	mov.u32 	%r9, %ntid.x;
	mov.u32 	%r10, %tid.x;
	mad.lo.s32 	%r1, %r8, %r9, %r10;
	setp.ge.s32 	%p1, %r1, %r4;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd6, %rd5;
	mul.wide.s32 	%rd7, %r1, 4;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.nc.u32 	%r11, [%rd8];
	cvta.to.global.u64 	%rd9, %rd4;
	add.s64 	%rd10, %rd9, %rd7;
	ld.global.nc.u32 	%r12, [%rd10];
	mad.lo.s32 	%r13, %r11, %r3, %r12;
	cvta.to.global.u64 	%rd11, %rd3;
	add.s64 	%rd12, %rd11, %rd7;
	ld.global.nc.u32 	%r14, [%rd12];
	mad.lo.s32 	%r15, %r13, %r2, %r14;
	shl.b32 	%r16, %r15, 1;
	cvta.to.global.u64 	%rd13, %rd2;
	mul.wide.s32 	%rd14, %r16, 4;
	add.s64 	%rd15, %rd13, %rd14;
	ld.global.nc.f32 	%f1, [%rd15];
	shl.b32 	%r17, %r1, 1;
	cvta.to.global.u64 	%rd16, %rd1;
	mul.wide.s32 	%rd17, %r17, 4;
	add.s64 	%rd18, %rd16, %rd17;
	st.global.f32 	[%rd18], %f1;
	ld.global.nc.f32 	%f2, [%rd15+4];
	st.global.f32 	[%rd18+4], %f2;

$L__BB0_2:
	ret;

}

`
)

package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/mumax/3/cuda/cu"
	"github.com/mumax/3/timer"
	"sync"
	"unsafe"
)

// CUDA handle for unipadmul kernel
var unipadmul_code cu.Function

// Stores the arguments for unipadmul kernel invocation
type unipadmul_args_t struct {
	arg_dst    unsafe.Pointer
	arg_Dx     int
	arg_Dy     int
	arg_Dz     int
	arg_Sx     int
	arg_Sy     int
	arg_Sz     int
	arg_Ms_    unsafe.Pointer
	arg_Ms_mul float32
	arg_vol    unsafe.Pointer
	argptr     [10]unsafe.Pointer
	sync.Mutex
}

// Stores the arguments for unipadmul kernel invocation
var unipadmul_args unipadmul_args_t

func init() {
	// CUDA driver kernel call wants pointers to arguments, set them up once.
	unipadmul_args.argptr[0] = unsafe.Pointer(&unipadmul_args.arg_dst)
	unipadmul_args.argptr[1] = unsafe.Pointer(&unipadmul_args.arg_Dx)
	unipadmul_args.argptr[2] = unsafe.Pointer(&unipadmul_args.arg_Dy)
	unipadmul_args.argptr[3] = unsafe.Pointer(&unipadmul_args.arg_Dz)
	unipadmul_args.argptr[4] = unsafe.Pointer(&unipadmul_args.arg_Sx)
	unipadmul_args.argptr[5] = unsafe.Pointer(&unipadmul_args.arg_Sy)
	unipadmul_args.argptr[6] = unsafe.Pointer(&unipadmul_args.arg_Sz)
	unipadmul_args.argptr[7] = unsafe.Pointer(&unipadmul_args.arg_Ms_)
	unipadmul_args.argptr[8] = unsafe.Pointer(&unipadmul_args.arg_Ms_mul)
	unipadmul_args.argptr[9] = unsafe.Pointer(&unipadmul_args.arg_vol)
}

// Wrapper for unipadmul CUDA kernel, asynchronous.
func k_unipadmul_async(dst unsafe.Pointer, Dx int, Dy int, Dz int, Sx int, Sy int, Sz int, Ms_ unsafe.Pointer, Ms_mul float32, vol unsafe.Pointer, cfg *config) {
	if Synchronous { // debug
		Sync()
		timer.Start("unipadmul")
	}

	unipadmul_args.Lock()
	defer unipadmul_args.Unlock()

	if unipadmul_code == 0 {
		unipadmul_code = fatbinLoad(unipadmul_map, "unipadmul")
	}

	unipadmul_args.arg_dst = dst
	unipadmul_args.arg_Dx = Dx
	unipadmul_args.arg_Dy = Dy
	unipadmul_args.arg_Dz = Dz
	unipadmul_args.arg_Sx = Sx
	unipadmul_args.arg_Sy = Sy
	unipadmul_args.arg_Sz = Sz
	unipadmul_args.arg_Ms_ = Ms_
	unipadmul_args.arg_Ms_mul = Ms_mul
	unipadmul_args.arg_vol = vol

	args := unipadmul_args.argptr[:]
	cu.LaunchKernel(unipadmul_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, stream0, args)

	if Synchronous { // debug
		Sync()
		timer.Stop("unipadmul")
	}
}

// maps compute capability on PTX code for unipadmul kernel.
var unipadmul_map = map[int]string{0: "",
	80: unipadmul_ptx_80}

// unipadmul PTX code for various compute capabilities.
const (
	unipadmul_ptx_80 = `
.version 8.2
.target sm_80
.address_size 64

	// .globl	unipadmul

.visible .entry unipadmul(
	.param .u64 unipadmul_param_0,
	.param .u32 unipadmul_param_1,
	.param .u32 unipadmul_param_2,
	.param .u32 unipadmul_param_3,
	.param .u32 unipadmul_param_4,
	.param .u32 unipadmul_param_5,
	.param .u32 unipadmul_param_6,
	.param .u64 unipadmul_param_7,
	.param .f32 unipadmul_param_8,
	.param .u64 unipadmul_param_9
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<12>;
	.reg .b32 	%r<22>;
	.reg .f64 	%fd<3>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd1, [unipadmul_param_0];
	ld.param.u32 	%r5, [unipadmul_param_1];
	ld.param.u32 	%r6, [unipadmul_param_2];
	ld.param.u32 	%r7, [unipadmul_param_4];
	ld.param.u32 	%r8, [unipadmul_param_5];
	ld.param.u32 	%r9, [unipadmul_param_6];
	ld.param.u64 	%rd2, [unipadmul_param_7];
	ld.param.f32 	%f10, [unipadmul_param_8];
	ld.param.u64 	%rd3, [unipadmul_param_9];
	mov.u32 	%r10, %ntid.x;
	mov.u32 	%r11, %ctaid.x;
	mov.u32 	%r12, %tid.x;
	mad.lo.s32 	%r1, %r11, %r10, %r12;
	mov.u32 	%r13, %ntid.y;
	mov.u32 	%r14, %ctaid.y;
	mov.u32 	%r15, %tid.y;
	mad.lo.s32 	%r2, %r14, %r13, %r15;
	mov.u32 	%r16, %ntid.z;
	mov.u32 	%r17, %ctaid.z;
	mov.u32 	%r18, %tid.z;
	mad.lo.s32 	%r3, %r17, %r16, %r18;
	setp.ge.s32 	%p1, %r1, %r7;
	setp.ge.s32 	%p2, %r2, %r8;
	or.pred  	%p3, %p1, %p2;
	setp.ge.s32 	%p4, %r3, %r9;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_6;

	mad.lo.s32 	%r19, %r3, %r8, %r2;
	mad.lo.s32 	%r4, %r19, %r7, %r1;
	setp.eq.s64 	%p6, %rd2, 0;
	@%p6 bra 	$L__BB0_3;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r4, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.global.nc.f32 	%f6, [%rd6];
	mul.f32 	%f10, %f6, %f10;

$L__BB0_3:
	setp.eq.s64 	%p7, %rd3, 0;
	mov.f32 	%f11, 0f3F800000;
	@%p7 bra 	$L__BB0_5;

	cvta.to.global.u64 	%rd7, %rd3;
	mul.wide.s32 	%rd8, %r4, 4;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.nc.f32 	%f11, [%rd9];

$L__BB0_5:
	mad.lo.s32 	%r20, %r3, %r6, %r2;
	mad.lo.s32 	%r21, %r20, %r5, %r1;
	cvta.to.global.u64 	%rd10, %rd1;
	mul.wide.s32 	%rd11, %r21, 4;
	add.s64 	%rd12, %rd10, %rd11;
	cvt.f64.f32 	%fd1, %f10;
	mul.f64 	%fd2, %fd1, 0d3EB515370F99F6CB;
	cvt.rn.f32.f64 	%f8, %fd2;
	mul.f32 	%f9, %f11, %f8;
	st.global.f32 	[%rd12], %f9;

$L__BB0_6:
	ret;

}

`
)
